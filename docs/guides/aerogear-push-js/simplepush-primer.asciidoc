---
layout: basic
title: SimplePush Primer
---

== SimplePush Primer

SimplePush protocol is Mozilla's new emerging standard for pushing notifications to the web, conceptually based on link:http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/pubs/archive/37474.pdf[Thialfi], Google's own highly scalable notification service. The primary goal of the protocol, as stated in the link:https://wiki.mozilla.org/WebAPI/SimplePush/Protocol[SimplePush specification] is:

_"To notify clients of changes to application server state in a reliable manner by ensuring that the client will always eventually learn of the latest version of an object for which it has expressed interest."_

If you closely read the definition, one important fact arises. By the use of words 'notify' and 'eventually learn', the spec upfront ?suggests? that the system is designed for data-signalling and not be used for data carrying. Once the client is notified for a change in the server state, the client is responsible to connect to the server and obtain the most 'recent version' of the object. That is in pair with how mobile notifications systems work, where the notification is used as a method of signalling instead of carrying the message.

The protocol involves three components. A server component (the _SimplePush_ server), responsible for pushing notification to web clients upon a change, a client component, a JavaScript API provided by the browser for web developers to use to register with the server and attach notification callbacks, and a third component, your application server (JBoss etc) where your backend application is running and changes in object state occur. The protocol utilizes WebSockets for real-time communication between the browser and the SimplePush server.


=== SimplePush Workflow

Let's examine how the SimplePush protocol works with the aid of an example. A user ''Joe'' uses an online web forum application and wants to be notified when a new post is created on a topic he has expressed interest. To accomplish that, the application using the JS API, registers with a SimplePush server the 'channels' is interested in (here the topic name). The server replies with an 'endpoint' URL. The client then sends the endpoint to the application server. Now, when a change in state occurs, the application server simply does an HTTP PUT on the endpoint URL informing the SimplePush server that a notification should be sent to client. Once received by the client, it contacts the application server to request the updated state (e.g. the new post). 

The following diagram visually describes the workflow:

<<<Workflow diagram>>>

Primary advantages of using SimplePush are:

* offloads the client to continuously poll your application server for changes in state.
* offloads your application server for notif. delivery and handling. It simply does a simple HTTP PUT on an endpoint when change in state occurs.
* The SimplePush server is designed to be higly efficent in notif. delivery as well as gracefully handle communication failures, server crashes etc. No need to start from scratch!
